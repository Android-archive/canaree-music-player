apply plugin: 'com.android.library'
apply from: '../base_module.gradle'
apply plugin: 'kotlin-kapt'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

android {

    defaultConfig {

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }

    }

    buildTypes {
        release {
            buildConfigField 'String', "LAST_FM_KEY", localProperties.last_fm_key
            buildConfigField 'String', "LAST_FM_SECRET", localProperties.last_fm_secret
        }
        debug {
            buildConfigField 'String', "LAST_FM_KEY", localProperties.last_fm_key
            buildConfigField 'String', "LAST_FM_SECRET", localProperties.last_fm_secret
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

dependencies {
    implementation project(':core')
    implementation project(':shared')
    implementation project(':prefs-keys')

    implementation libs.dagger.core
    kapt libs.dagger.kapt

    implementation libs.x.core
    implementation libs.x.preference

    implementation libs.x.room.core
    implementation libs.x.room.coroutines
    kapt libs.x.room.kapt

    implementation libs.network.gson
    implementation libs.network.retrofit
    implementation libs.network.retrofit_gson
    implementation libs.network.ok_http
    implementation libs.network.ok_http_interceptor

    implementation libs.utils.sql_content_resolver
    implementation libs.utils.fuzzy
}
